name: CI Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build_test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code from dev branch
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3. Install dependencies
      - name: Install dependencies
        run: npm install

      # 4. Run tests
      - name: Run tests
        run: |
          mkdir -p test-results
          npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=./test-results/results.xml

      - name: test results pubish
        uses: actions/upload-artifact@v4.6.2
        if:  always()
        with:
          name: test-results-artifact
          path: test-results/results.xml

      - name: run code quality using eslink(jave script framework)
        run: |
          set -o pipefail
          npx eslint . --ext .js --exit-on-fatal-error -f stylish | tee lint-report.txt

      - name: code quality publish
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: code-quality-artifact
          path: lint-report.txt

      - name : dependency
        run: |
          npm audit --audit-level=high --json > npm-audit-report.json

      - name: vul
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: code-dependency-artifact
          path: npm-audit-report.json

      -  name: build dockerfiles
         run: docker build -t my-node-app .

      -  name: Install Trivy
         run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh
          sudo mv ./bin/trivy /usr/local/bin/
          trivy --version

      -  name: scan docker image
         run:  trivy image --exit-code 1 --severity HIGH,CRITICAL my-node-app

      -  name: run test inside container
         run:  docker run --rm my-node-app npm test

      - name: logging into docker hub
        run:  echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: tag docker image to hub
        run: |
          docker tag my-node-app ${{ secrets.DOCKER_HUB_USERNAME }}/my-node-app:dev-latest
          docker tag my-node-app ${{ secrets.DOCKER_HUB_USERNAME }}/my-node-app:dev-${{github.sha}}
      - name: docker push image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-node-app:dev-latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-node-app:dev-${{github.sha}}

  
         
      
    
      

        
